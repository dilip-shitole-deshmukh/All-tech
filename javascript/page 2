Got it ✅ You want **deeper, interview-ready answers** that:

* Explain **definition + concept**
* Give **examples (with code if needed)**
* Highlight 📌 **pitfalls / key points**
* Still stay **easy-to-understand**

I’ll now **re-do Stage 1.2.1 → 1.2.4 (Loops & Functions)** but with **more detailed explanations**.
This will make your notes **ready to revise + explain in interviews**.

---

# 🔥 JavaScript Deep Interview Q\&A Notes

## 1.2.1 Loops: `for`, `while`, `do-while`

**Q23. What are the main types of loops in JavaScript?**
👉 Answer:
JavaScript provides several looping constructs to **execute a block of code multiple times**:

1. **`for` loop** → runs for a known number of iterations.
2. **`while` loop** → runs until a condition becomes false.
3. **`do…while` loop** → runs at least once, then checks the condition.

📌 Key point: Use `for` when you know iteration count, `while` when you don’t.

```js
for (let i=0; i<3; i++) { console.log(i); }  // 0,1,2
let j=0; while(j<3){ console.log(j); j++; }  // 0,1,2
let k=0; do { console.log(k); k++; } while(k<3); // 0,1,2
```

---

**Q24. Difference between `for` and `while` loop?**
👉 Answer:

* `for` → all loop elements (initialization, condition, increment) are in one line → **structured**.
* `while` → only condition is in loop statement, initialization/increment handled separately.

📌 `for` is better when count is known, `while` for **uncertain iterations** (like waiting for user input).

---

**Q25. Difference between `while` and `do-while` loop?**
👉 Answer:

* `while`: Condition checked **before** execution → may run **zero times**.
* `do-while`: Condition checked **after** execution → runs **at least once**.

```js
let x = 5;
while(x < 5){ console.log("Runs?"); } // Won’t run
do { console.log("Runs at least once"); } while(x < 5);
```

📌 **Interview Trap**: Many candidates forget that `do-while` runs once even if condition is false.

---

**Q26. How do you break out of a loop in JavaScript?**
👉 Answer: Use **`break`** keyword.

```js
for(let i=0;i<5;i++){
  if(i===3) break; 
  console.log(i); // 0,1,2
}
```

📌 Ends loop immediately.

---

**Q27. How do you skip an iteration in a loop?**
👉 Answer: Use **`continue`**.

```js
for(let i=0;i<5;i++){
  if(i===2) continue;
  console.log(i); // 0,1,3,4
}
```

---

**Q28. What are loop labels in JavaScript?**
👉 Answer: Labels allow controlling **nested loops**.

```js
outer: for (let i=0;i<3;i++){
  for(let j=0;j<3;j++){
    if(j===1) break outer; // breaks outer loop
  }
}
```

📌 Rarely used in production, but asked in interviews.

---

## 1.2.2 Functions: Declaration, Expressions, Arrow Functions

**Q29. What are the ways to define functions in JavaScript?**
👉 Answer:

1. **Function Declaration** → Named & hoisted.

   ```js
   function add(a,b){ return a+b; }
   ```
2. **Function Expression** → Stored in variable, not hoisted.

   ```js
   const add = function(a,b){ return a+b; }
   ```
3. **Arrow Function** → Short syntax, no `this`.

   ```js
   const add = (a,b) => a+b;
   ```

📌 Difference: Declaration is hoisted, others aren’t.

---

**Q30. Difference between function declaration and expression?**
👉 Answer:

* **Declaration**: Hoisted → can call before definition.
* **Expression**: Not hoisted → must be defined first.

```js
console.log(sum(2,3)); // ✅ Works
function sum(a,b){ return a+b; }

console.log(mul(2,3)); // ❌ Error
const mul = function(a,b){ return a*b; }
```

---

**Q31. What are arrow functions?**
👉 Answer: Introduced in ES6 → compact function syntax.

* No `this` → inherits from surrounding scope 📌.
* No `arguments` object.
* Can’t be used as constructors.

```js
const greet = name => `Hello ${name}`;
console.log(greet("Dilip")); // Hello Dilip
```

📌 Used heavily in callbacks & array methods.

---

**Q32. Why can’t arrow functions be used as constructors?**
👉 Answer: Arrow functions don’t have their own `this` or `prototype`.

```js
const Person = (name)=>{ this.name = name; }
let p = new Person("Dilip"); // ❌ Error
```

---

**Q33. What is an anonymous function?**
👉 Answer: A function without a name.
Common in callbacks:

```js
setTimeout(function(){ console.log("Anonymous!"); }, 1000);
```

📌 Used for short-lived tasks.

---

**Q34. What is an IIFE (Immediately Invoked Function Expression)?**
👉 Answer: A function that executes immediately after definition.

```js
(function(){ console.log("Runs instantly!"); })();
```

📌 Used to **avoid polluting global scope** before modules existed.

---

## 1.2.3 Basic ES6 Q\&A

**Q35. What is ES6 (ECMAScript 2015)?**
👉 Answer: Major JavaScript upgrade with 📌 modern features:

* Block scope (`let`, `const`)
* Arrow functions
* Template literals
* Classes
* Modules (import/export)
* Promises
* Destructuring

---

**Q36. What are template literals?**
👉 Answer: String literals using backticks.

* Allow interpolation: `` `Hello ${name}` ``
* Allow multiline strings.

```js
let name="Dilip";
console.log(`Welcome, ${name}!`);
```

📌 Removes messy string concatenation.

---

**Q37. What are default parameters in ES6?**
👉 Answer: Allows setting fallback values for function arguments.

```js
function greet(name="Guest"){ console.log("Hello "+name); }
greet(); // Hello Guest
```

📌 Prevents `undefined` values when parameters not passed.

---

**Q38. What are rest parameters?**
👉 Answer: Collects remaining arguments into an array.

```js
function sum(...nums){ return nums.reduce((a,b)=>a+b,0); }
console.log(sum(1,2,3)); // 6
```

---

**Q39. What are spread operators?**
👉 Answer: Expands arrays/objects.

```js
let arr = [1,2,3];
let newArr = [...arr, 4]; // [1,2,3,4]
```

📌 Used in **copying, merging, destructuring**.

---

## 1.2.4 New ES6 Methods

**Q40. What new array methods were added in ES6?**
👉 Answer:

* `Array.from()` → Converts iterable to array.
* `Array.of()` → Creates array from arguments.
* `Array.find()` → First element matching condition.
* `Array.findIndex()` → Index of first match.

```js
console.log(Array.from("abc")); // ["a","b","c"]
console.log([1,2,3].find(n=>n>1)); // 2
```

---

**Q41. What is `Object.assign()` used for?**
👉 Answer: Copies properties from one object to another.

```js
let obj1 = {a:1}, obj2 = {b:2};
let merged = Object.assign({}, obj1, obj2); // {a:1, b:2}
```

📌 Used for shallow cloning.

---

**Q42. What is `Object.keys()`, `Object.values()`, and `Object.entries()`?**
👉 Answer:

* `Object.keys(obj)` → property names.
* `Object.values(obj)` → property values.
* `Object.entries(obj)` → key-value pairs.

```js
let obj = {a:1, b:2};
console.log(Object.entries(obj)); // [["a",1],["b",2]]
```

---

**Q43. What is `Set` in ES6?**
👉 Answer: A collection of **unique values**.

```js
let s = new Set([1,2,2,3]); 
console.log(s); // {1,2,3}
```

📌 Good for removing duplicates.

---

**Q44. What is `Map` in ES6?**
👉 Answer: A collection of **key-value pairs** where keys can be objects.

```js
let m = new Map();
m.set("name", "Dilip");
m.set({id:1}, "UserObj");
```

---

**Q45. Difference between `Set` and `Map`?**
👉 Answer:

* `Set` → Only values, unique.
* `Map` → Key-value pairs, keys can be any type.

---

✅ That’s **23 detailed Q\&A** for Stage 1.2.1 → 1.2.4.

Next, I’ll cover **Scope & Context (1.2.5 → 1.3.5)** with deep explanations.

Would you like me to **keep code snippets for every concept** (even if repetitive), or should I **add them only where tricky/confusing** (like closures, hoisting, `this`)?
